# FILE: actions/actions.py

import json
import os
import unicodedata
from typing import Any, Text, Dict, List

from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet

# --- Global cache cho d·ªØ li·ªáu JSON ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t ---
PROVINCE_DATA_CACHE = {}  # L∆∞u d·ªØ li·ªáu t·∫•t c·∫£ t·ªânh, key l√† normalized_location

# --- Danh s√°ch synonym cho t·ªânh c≈©/m·ªõi sau s√°p nh·∫≠p theo Ngh·ªã quy·∫øt 202/2025/QH15 ---
# Key: normalized t√™n t·ªânh c≈© b·ªã g·ªôp, Value: normalized t√™n t·ªânh m·ªõi
SYNONYMS = {
    # T·ªânh L√†o Cai m·ªõi (g·ªôp Y√™n B√°i, L√†o Cai)
    "yen_bai": "lao_cai",

    # T·ªânh Th√°i Nguy√™n m·ªõi (g·ªôp B·∫Øc K·∫°n, Th√°i Nguy√™n)
    "bac_kan": "thai_nguyen",

    # T·ªânh Ph√∫ Th·ªç m·ªõi (g·ªôp Vƒ©nh Ph√∫c, H√≤a B√¨nh, Ph√∫ Th·ªç)
    "vinh_phuc": "phu_tho",
    "hoa_binh": "phu_tho",

    # T·ªânh B·∫Øc Ninh m·ªõi (g·ªôp B·∫Øc Giang, B·∫Øc Ninh)
    "bac_giang": "bac_ninh",

    # T·ªânh H∆∞ng Y√™n m·ªõi (g·ªôp Th√°i B√¨nh, H∆∞ng Y√™n)
    "thai_binh": "hung_yen",

    # Th√†nh ph·ªë H·∫£i Ph√≤ng m·ªõi (g·ªôp H·∫£i Ph√≤ng, H·∫£i D∆∞∆°ng)
    "hai_duong": "hai_phong",

    # T·ªânh Ninh B√¨nh m·ªõi (g·ªôp H√† Nam, Nam ƒê·ªãnh, Ninh B√¨nh)
    "ha_nam": "ninh_binh",
    "nam_dinh": "ninh_binh",

    # T·ªânh Qu·∫£ng Tr·ªã m·ªõi (g·ªôp Qu·∫£ng B√¨nh, Qu·∫£ng Tr·ªã)
    "quang_binh": "quang_tri",

    # Th√†nh ph·ªë ƒê√† N·∫µng m·ªõi (g·ªôp ƒê√† N·∫µng, Qu·∫£ng Nam)
    "quang_nam": "da_nang",

    # T·ªânh Qu·∫£ng Ng√£i m·ªõi (g·ªôp Kon Tum, Qu·∫£ng Ng√£i)
    "kon_tum": "quang_ngai",

    # T·ªânh Gia Lai m·ªõi (g·ªôp B√¨nh ƒê·ªãnh, Gia Lai)
    "binh_dinh": "gia_lai",

    # T·ªânh Kh√°nh H√≤a m·ªõi (g·ªôp Ninh Thu·∫≠n, Kh√°nh H√≤a)
    "ninh_thuan": "khanh_hoa",

    # T·ªânh L√¢m ƒê·ªìng m·ªõi (g·ªôp ƒê·∫Øk N√¥ng, B√¨nh Thu·∫≠n, L√¢m ƒê·ªìng)
    "dak_nong": "lam_dong",
    "binh_thuan": "lam_dong",

    # T·ªânh ƒê·∫Øk L·∫Øk m·ªõi (g·ªôp Ph√∫ Y√™n, ƒê·∫Øk L·∫Øk)
    "phu_yen": "dak_lak",

    # Th√†nh ph·ªë H·ªì Ch√≠ Minh m·ªõi (g·ªôp TP. H·ªì Ch√≠ Minh, B√† R·ªãa - V≈©ng T√†u, B√¨nh D∆∞∆°ng)
    "ba_ria_vung_tau": "ho_chi_minh",
    "binh_duong": "ho_chi_minh",

    # T·ªânh ƒê·ªìng Nai m·ªõi (g·ªôp B√¨nh Ph∆∞·ªõc, ƒê·ªìng Nai)
    "binh_phuoc": "dong_nai",

    # T·ªânh T√¢y Ninh m·ªõi (g·ªôp Long An, T√¢y Ninh)
    "long_an": "tay_ninh",

    # Th√†nh ph·ªë C·∫ßn Th∆° m·ªõi (g·ªôp C·∫ßn Th∆°, S√≥c TrƒÉng, H·∫≠u Giang)
    "soc_trang": "can_tho",
    "hau_giang": "can_tho",

    # T·ªânh Vƒ©nh Long m·ªõi (g·ªôp B·∫øn Tre, Tr√† Vinh, Vƒ©nh Long)
    "ben_tre": "vinh_long",
    "tra_vinh": "vinh_long",

    # T·ªânh ƒê·ªìng Th√°p m·ªõi (g·ªôp Ti·ªÅn Giang, ƒê·ªìng Th√°p)
    "tien_giang": "dong_thap",

    # T·ªânh C√† Mau m·ªõi (g·ªôp B·∫°c Li√™u, C√† Mau)
    "bac_lieu": "ca_mau",

    # T·ªânh An Giang m·ªõi (g·ªôp Ki√™n Giang, An Giang)
    "kien_giang": "an_giang",

    # C√°c synonym kh√°c cho t√™n g·ªçi ph·ªï bi·∫øn ho·∫∑c bi·∫øn th·ªÉ (kh√¥ng s√°p nh·∫≠p nh∆∞ng ƒë·ªÉ h·ªó tr·ª£)
    "kinh_bac": "bac_ninh",  # Bi·∫øn th·ªÉ cho B·∫Øc Ninh
    "phu_quoc": "an_giang",  # Ph√∫ Qu·ªëc thu·ªôc An Giang m·ªõi
    "chau_doc": "an_giang",  # Ch√¢u ƒê·ªëc thu·ªôc An Giang m·ªõi
    # Th√™m bi·∫øn th·ªÉ n·∫øu c·∫ßn, v√≠ d·ª•:
    "saigon": "ho_chi_minh",
    "hue": "hue"  # Gi·ªØ nguy√™n
}

def load_all_provinces():
    """T·∫£i t·∫•t c·∫£ file JSON v√†o cache khi kh·ªüi ƒë·ªông."""
    if PROVINCE_DATA_CACHE:
        return  # ƒê√£ t·∫£i r·ªìi
    provinces_dir = os.path.join("data", "knowledge_base", "provinces")
    for filename in os.listdir(provinces_dir):
        if filename.endswith(".json"):
            normalized_location = filename.replace(".json", "")
            file_path = os.path.join(provinces_dir, filename)
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            PROVINCE_DATA_CACHE[normalized_location] = data

# T·∫£i cache ngay khi import file
load_all_provinces()

# --- H√†m h·ªó tr·ª£ chu·∫©n h√≥a t√™n file ---
def normalize_vietnamese_text(text: Text) -> Text:
    """
    Chu·∫©n h√≥a vƒÉn b·∫£n ti·∫øng Vi·ªát ƒë·ªÉ t·∫°o t√™n file.
    V√≠ d·ª•: "H√† N·ªôi" -> "ha_noi", "ƒê·∫Øk L·∫Øk" -> "dak_lak"
    """
    if not text:
        return ""
    # Chuy·ªÉn th√†nh d·∫°ng kh√¥ng d·∫•u v√† b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
    no_accent_text = "".join(
        c for c in unicodedata.normalize("NFD", text) 
        if unicodedata.category(c) != "Mn"
    )
    # X·ª≠ l√Ω ch·ªØ "ƒê"
    no_accent_text = no_accent_text.replace("ƒê", "D").replace("ƒë", "d")
    # Thay th·∫ø kho·∫£ng tr·∫Øng b·∫±ng g·∫°ch d∆∞·ªõi v√† chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng
    return no_accent_text.replace(" ", "_").lower()

# --- Action ch√≠nh ƒë·ªÉ tra c·ª©u v√† tr·∫£ l·ªùi ---
class ActionQueryKnowledgeBase(Action):

    def name(self) -> Text:
        # T√™n c·ªßa action n√†y, ph·∫£i tr√πng v·ªõi t√™n trong domain.yml
        return "action_query_knowledge_base"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # L·∫•y th√¥ng tin t·ª´ slot
        location = tracker.get_slot("location")
        requested_info = tracker.get_slot("requested_info")
        time_filter = tracker.get_slot("time")  # Th√™m slot time ƒë·ªÉ l·ªçc festival

        # N·∫øu kh√¥ng c√≥ ƒë·ªãa ƒëi·ªÉm, y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p
        if not location:
            dispatcher.utter_message(response="utter_ask_for_location")
            return []

        try:
            # X·ª≠ l√Ω synonym n·∫øu c√≥
            normalized_location = normalize_vietnamese_text(location)
            if normalized_location in SYNONYMS:
                normalized_location = SYNONYMS[normalized_location]

            # L·∫•y data t·ª´ cache
            data = PROVINCE_DATA_CACHE.get(normalized_location)
            if not data:
                dispatcher.utter_message(text=f"Xin l·ªói, t√¥i ch∆∞a c√≥ d·ªØ li·ªáu cho '{location}'. T√¥i s·∫Ω s·ªõm c·∫≠p nh·∫≠t.")
                return [SlotSet("location", None)]

            # T√¨m ƒë√∫ng data c·ªßa t·ªânh trong JSON
            province_data = None
            for key in data:
                if normalize_vietnamese_text(key) == normalized_location:
                    province_data = data[key]
                    break
            
            if not province_data:
                dispatcher.utter_message(text=f"Xin l·ªói, t√¥i ch∆∞a c√≥ d·ªØ li·ªáu chi ti·∫øt cho '{location}'.")
                return [SlotSet("location", None)]

            # X·ª≠ l√Ω sub_regions n·∫øu requested_info l√† "sub_regions" ho·∫∑c h·ªèi v·ªÅ s√°p nh·∫≠p
            if requested_info == "sub_regions" or "sap_nhap" in requested_info.lower() or "moi_gom" in requested_info.lower():
                response_title = f"üó∫Ô∏è C·∫•u tr√∫c v√πng mi·ªÅn c·ªßa **{location} m·ªõi**:"
                response_body = ""
                sub_regions = province_data.get("sub_regions", [])
                if sub_regions:
                    for region in sub_regions:
                        name = region.get("name", "N/A")
                        highlights = region.get("highlights", "")
                        response_body += f"- **{name}**: {highlights}\n"
                else:
                    response_body = "T·ªânh n√†y kh√¥ng c√≥ d·ªØ li·ªáu v·ªÅ c√°c khu v·ª±c con."
                dispatcher.utter_message(text=f"{response_title}\n{response_body}")
                return [SlotSet("location", None), SlotSet("requested_info", None)]

            # X√¢y d·ª±ng c√¢u tr·∫£ l·ªùi d·ª±a tr√™n requested_info
            response_title = f"üìù D∆∞·ªõi ƒë√¢y l√† th√¥ng tin v·ªÅ **{location}**:"
            response_body = ""

            info_list = []
            if requested_info == "places_to_visit":
                response_title = f"üèûÔ∏è C√°c ƒë·ªãa ƒëi·ªÉm kh√¥ng th·ªÉ b·ªè l·ª° t·∫°i **{location}**:"
                info_list = province_data.get("places_to_visit", [])
            elif requested_info == "what_to_eat":
                response_title = f"üçú ƒê·∫∑c s·∫£n ·∫©m th·ª±c t·∫°i **{location}**:"
                info_list = province_data.get("what_to_eat", [])
            elif requested_info == "festivals":
                response_title = f"üéä C√°c l·ªÖ h·ªôi ƒë·∫∑c s·∫Øc t·∫°i **{location}**:"
                festivals = province_data.get("festivals", [])
                if time_filter:
                    # L·ªçc festival theo time n·∫øu c√≥
                    filtered_festivals = [f for f in festivals if time_filter.lower() in f.get("time", "").lower()]
                    info_list = filtered_festivals if filtered_festivals else festivals
                    if filtered_festivals:
                        response_title += f" (l·ªçc theo '{time_filter}')"
                    else:
                        response_body += f"Kh√¥ng t√¨m th·∫•y l·ªÖ h·ªôi v√†o '{time_filter}', ƒë√¢y l√† t·∫•t c·∫£ l·ªÖ h·ªôi:\n"
                else:
                    info_list = festivals
            elif requested_info == "transportation":
                response_title = f"üöó Ph∆∞∆°ng ti·ªán di chuy·ªÉn ƒë·∫øn **{location}**:"
                transportation = province_data.get("transportation", [])
                if transportation:
                    response_body = "\n".join([f"- {item}" for item in transportation])
                else:
                    response_body = "Ch∆∞a c√≥ d·ªØ li·ªáu v·ªÅ ph∆∞∆°ng ti·ªán di chuy·ªÉn."
            else:  # H·ªèi chung chung
                response_body = province_data.get("culture_details", "T√¥i ch∆∞a c√≥ m√¥ t·∫£ chi ti·∫øt.") + "\n\n"
                response_body += "B·∫°n c√≥ th·ªÉ gh√© thƒÉm m·ªôt v√†i n∆°i n·ªïi b·∫≠t nh∆∞:\n"
                info_list = province_data.get("places_to_visit", [])[:3]  # G·ª£i √Ω 3 ƒë·ªãa ƒëi·ªÉm ƒë·∫ßu
                response_body += "\nNgo√†i ra, m·ªôt s·ªë l·ªÖ h·ªôi ƒë√°ng ch√∫ √Ω:\n"
                info_list += province_data.get("festivals", [])[:2]  # G·ª£i √Ω 2 l·ªÖ h·ªôi

            # ƒê·ªãnh d·∫°ng danh s√°ch th√¥ng tin
            if info_list:
                for item in info_list:
                    item_name = item.get("name", "N/A")
                    item_details = item.get("details", "")
                    item_time = item.get("time", "")  # N·∫øu l√† festival
                    response_body += f"- **{item_name}** ({item_time}): {item_details}\n"

            # G·ª≠i c√¢u tr·∫£ l·ªùi
            dispatcher.utter_message(text=f"{response_title}\n{response_body}")

        except Exception as e:
            print(f"ƒê√£ x·∫£y ra l·ªói: {e}")
            dispatcher.utter_message(text="R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra khi t√¥i t√¨m ki·∫øm th√¥ng tin.")

        # X√≥a c√°c slot sau khi ƒë√£ tr·∫£ l·ªùi ƒë·ªÉ chu·∫©n b·ªã cho c√¢u h·ªèi m·ªõi
        return [SlotSet("location", None), SlotSet("requested_info", None), SlotSet("time", None)]